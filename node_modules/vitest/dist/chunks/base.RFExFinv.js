import { runInThisContext } from 'node:vm';
import * as spyModule from '@vitest/spy';
import { V as VitestEvaluatedModules } from './evaluatedModules.Dg1zASAC.js';
import { s as startVitestModuleRunner, c as createNodeImportMeta } from './startModuleRunner.BqQUfEjB.js';
import { performance } from 'node:perf_hooks';
import { startTests, collectTests } from '@vitest/runner';
import { a as resolveSnapshotEnvironment, s as setupChaiConfig, r as resolveTestRunner } from './resolveSnapshotEnvironment.BZzLjzkh.js';
import { c as setupCommonEnv, s as startCoverageInsideWorker, a as stopCoverageInsideWorker } from './setup-common.DR1sucx6.js';
import { g as globalExpect, v as vi } from './vi.BZvkKVkM.js';
import { c as closeInspector } from './inspector.DLZxSeU3.js';
import { createRequire } from 'node:module';
import timers from 'node:timers';
import timersPromises from 'node:timers/promises';
import util from 'node:util';
import { KNOWN_ASSET_TYPES } from '@vitest/utils/constants';
import { getSafeTimers } from '@vitest/utils/timers';
import { i as index } from './index.RwjEGCQ0.js';
import { g as getWorkerState, r as resetModules, p as provideWorkerState } from './utils.CG9h5ccR.js';

// this should only be used in Node
let globalSetup = false;
async function setupGlobalEnv(config, { environment }, moduleRunner) {
	await setupCommonEnv(config), Object.defineProperty(globalThis, "__vitest_index__", {
		value: index,
		enumerable: false
	});
	const state = getWorkerState();
	if (!state.config.snapshotOptions.snapshotEnvironment) state.config.snapshotOptions.snapshotEnvironment = await resolveSnapshotEnvironment(config, moduleRunner);
	if (!globalSetup) {
		if (globalSetup = true, (environment.viteEnvironment || environment.name) === "client") {
			const _require = createRequire(import.meta.url);
			_require.extensions[".css"] = resolveCss, _require.extensions[".scss"] = resolveCss, _require.extensions[".sass"] = resolveCss, _require.extensions[".less"] = resolveCss, KNOWN_ASSET_TYPES.forEach((type) => {
				_require.extensions[`.${type}`] = resolveAsset;
			}), process.env.SSR = "";
		} else process.env.SSR = "1";
		if (globalThis.__vitest_required__ = {
			util,
			timers,
			timersPromises
		}, !config.disableConsoleIntercept) await setupConsoleLogSpy();
	}
}
function resolveCss(mod) {
	mod.exports = "";
}
function resolveAsset(mod, url) {
	mod.exports = url;
}
async function setupConsoleLogSpy() {
	const { createCustomConsole } = await import('./console.CTJL2nuH.js');
	globalThis.console = createCustomConsole();
}
async function withEnv({ environment }, options, fn) {
	globalThis.__vitest_environment__ = environment.name, globalExpect.setState({ environment: environment.name });
	const env = await environment.setup(globalThis, options);
	try {
		await fn();
	} finally {
		// Run possible setTimeouts, e.g. the onces used by ConsoleLogSpy
		const { setTimeout } = getSafeTimers();
		await new Promise((resolve) => setTimeout(resolve)), await env.teardown(globalThis);
	}
}

// browser shouldn't call this!
async function run(method, files, config, environment, moduleRunner) {
	const workerState = getWorkerState();
	if (await setupGlobalEnv(config, environment, moduleRunner), await startCoverageInsideWorker(config.coverage, moduleRunner, { isolate: config.isolate }), config.chaiConfig) setupChaiConfig(config.chaiConfig);
	const runner = await resolveTestRunner(config, moduleRunner);
	workerState.onCancel.then((reason) => {
		closeInspector(config), runner.cancel?.(reason);
	}), workerState.durations.prepare = performance.now() - workerState.durations.prepare, workerState.durations.environment = performance.now(), await withEnv(environment, environment.options || config.environmentOptions || {}, async () => {
		workerState.durations.environment = performance.now() - workerState.durations.environment;
		for (const file of files) {
			if (config.isolate) moduleRunner.mocker.reset(), resetModules(workerState.evaluatedModules, true);
			if (workerState.filepath = file.filepath, method === "run") await startTests([file], runner);
			else await collectTests([file], runner);
			// mocks should not affect different files
			vi.resetConfig(), vi.restoreAllMocks();
		}
		await stopCoverageInsideWorker(config.coverage, moduleRunner, { isolate: config.isolate });
	}), workerState.environmentTeardownRun = true;
}

let _moduleRunner;
const evaluatedModules = new VitestEvaluatedModules(), moduleExecutionInfo = /* @__PURE__ */ new Map();
function startModuleRunner(options) {
	return _moduleRunner || (_moduleRunner = startVitestModuleRunner(options), _moduleRunner);
}
/** @experimental */
async function runBaseTests(method, state) {
	const { ctx } = state;
	if (state.evaluatedModules = evaluatedModules, state.moduleExecutionInfo = moduleExecutionInfo, provideWorkerState(globalThis, state), ctx.invalidates) ctx.invalidates.forEach((filepath) => {
		(state.evaluatedModules.fileToModulesMap.get(filepath) || []).forEach((module) => {
			state.evaluatedModules.invalidateModule(module);
		});
	});
	ctx.files.forEach((i) => {
		const filepath = typeof i === "string" ? i : i.filepath;
		(state.evaluatedModules.fileToModulesMap.get(filepath) || []).forEach((module) => {
			state.evaluatedModules.invalidateModule(module);
		});
	});
	const executor = startModuleRunner({
		state,
		evaluatedModules: state.evaluatedModules,
		spyModule,
		createImportMeta: createNodeImportMeta
	}), fileSpecs = ctx.files.map((f) => typeof f === "string" ? {
		filepath: f,
		testLocations: void 0
	} : f);
	// we could load @vite/env, but it would take ~8ms, while this takes ~0,02ms
	if (ctx.config.serializedDefines) try {
		runInThisContext(`(() =>{\n${ctx.config.serializedDefines}})()`, {
			lineOffset: 1,
			filename: "virtual:load-defines.js"
		});
	} catch (error) {
		throw new Error(`Failed to load custom "defines": ${error.message}`);
	}
	await run(method, fileSpecs, ctx.config, {
		environment: state.environment,
		options: ctx.environment.options
	}, executor);
}

export { runBaseTests as r };
